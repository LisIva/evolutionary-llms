To solve this problem, we'll use the information given in the "exp_buffer" dictionary to guide the creation of a new equation that matches the conditions given and has not yet been tried. We'll look at the form of the equations in the "exp_buffer" and the scores associated with them to guess the structure of a new equation. Let's consider an equation similar to the one with the lowest score to maximize the potential of this proposal. 

The equation in exp_buffer with the best score is:
`du/dt = c[0] * u * du/dx`

As a next guess, we can add more complexity to this equation by involving the time 't' and x in the equation, in an incremental fashion.

Let's propose the following equation: 
du/dt = c[0] * u * du/dx + c[1] * t * du/dx

Our function, equation_v1, that represents this proposed equation will look as follows:

```python
def equation_v1(t: np.ndarray, x: np.ndarray, u: np.ndarray, derivs_dict: dict(), params: np.ndarray):
    # c[0] and c[1] are the coefficients to be fitted
    right_side = params[0] * u * derivs_dict["du/dx"] + params[1] * t * derivs_dict["du/dx"]
    string_form_of_the_equation = "du/dt = c[0] * u * du/dx + c[1] * t * du/dx"
    len_of_params = 2
    return (right_side, string_form_of_the_equation, len_of_params)
```

The function equation_v1 accepts inputs t, x, u, derivs_dict and params. It then constructs the right_side of the equation following the equation structure provided. It also returns the string form of the equation and the length of the params array.

This is a dependent on the derivative du/dx and preserving nonlinear dynamics involving u and t, as required by the prompt. 

Can we verify the equation? Use the evaluate() function to determine a score for the equation (score is a float value). Averaged over all points, a lower score indicates better fit of the suggested equation with the data. A score of None indicates an error in calculation. Let's consider this a first guess and refine it as we receive more insights from the system evaluation.

The approach taken here for equation generation is straightforward but effective for the problem given. Because we don't have a deep understanding of the underlying dynamics, every new equation is a data-driven guess. We hypothesize that the equation parameters likely change as the system approaches different conditions (e.g., temperature or turbulence status for fluid dynamics). This might be why we see different patterns for du/dt at different time points.

Despite this, this first guess does not qualify as a full physics-informed model. For a more robust predictive model, domain knowledge would play a significant role in constraining the equation structure and improving fit accuracy.

Based on the results from the evaluate function, we can then make further iterations to our equation, considering more parameters or a different structure of the relation between du/dt and u, x, t, du/dx. These iterations would be based on identifying patterns in the data and understanding the physics of the system.

Note that even after we obtain a best fit, we should also analyze the residual statistics to ensure that the model is not overfitting to the provided set of points. This residual analysis would involve fitting the equation to different, withheld examples, and comparing the du/dt error statistics (bias and variance) to further refine our model.

This process will help us create a physics-informed model, where understanding of physics and patterns of the given set of points guide the equation formation, aiming for the best predictive model of du/dt.