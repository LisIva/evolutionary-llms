Based on the data provided and the requirement to consider at least one derivative, the equation du/dt = c[0] * t * du/dx + c[1] * u * du/dx is a candidate from exp_buffer. However, since we must not copy equations from exp_buffer directly, we will make slight modifications to construct a new guess.

To innovate, we can introduce higher-order derivatives and more terms while keeping the purpose. Here is one such equation:

du/dt = c[0] * (du/dx + u) + c[1] * t * du/dx + c[2] * d^3u/dx^3

To follow the request NOT to include complex expressions unless necessary, let us simplify this equation and look at: 

du/dt = c[0] * x * du/dx + c[1] * t * d^2u/dx^2 + c[2] * u * du/dx 
Implement it in this way:

```python
def equation_v1(t: np.ndarray, x: np.ndarray, u: np.ndarray, derivs_dict: dict(), params: np.ndarray):
    right_side = params[0] * x * derivs_dict["du/dx"] + params[1] * t * derivs_dict["d^2u/dx^2"] + params[2] * u * derivs_dict["du/dx"]
    string_form_of_the_equation = "du/dt = c[0] * x * du/dx + c[1] * t * d^2u/dx^2 + c[2] * u * du/dx"
    len_of_params = 3
    return right_side, string_form_of_the_equation, len_of_params
```

Be aware this is a simplified outcome, and the complexity of the overall equation might be larger much depending upon the actual equation that better fits the points_set. You may want to consider more complex cases as advised. This equation, however, fulfills the requirements of depending on at least one derivative and of not duplicating any equation from exp_buffer. If the function equation_v0 constructs a far too simple form, you can extend equation_v1 by adding additional terms or higher-order derivatives. However, given the request was to avoid excessive complexity, this solution seems appropriate.