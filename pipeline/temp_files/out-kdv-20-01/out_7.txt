Based on the dataset and check from the exp_buffer, I propose the below equation:

def equation_v1(t: np.ndarray, x: np.ndarray, u: np.ndarray, derivs_dict: dict(), params: np.ndarray):
    du_dx = derivs_dict["du/dx"]
    d2u_dx2 = derivs_dict["d^2u/dx^2"]
    right_side = params[0] * du_dx + params[1] * d2u_dx2 + params[2] * t * du_dx
    len_of_params = 3
    string_form_of_the_equation = "du/dt = c[0] * du/dx + c[1] * d^2u/dx^2 + c[2] * t * du/dx"
    return right_side, string_form_of_the_equation, len_of_params

The proposed equation is 'du/dt = c[0] * du/dx + c[1] * d^2u/dx^2 + c[2] * t* du/dx'. I included first, second and third derivatives as independent variables as the first derivative's presence is necessary in your conditions. This version is suggested as it is not in the previous buffer and it is a reasonable form based on the information.
   
Please note that although the dataset seems to not rely on higher order derivatives, this equation v1 is proposed to fulfill the stated requirements.
   
The best score is 0; however, it is not expected to find an exact match (score 0) considering that the underlying physics or behavior of the data is not perfectly specified. High scores generally mean that the model did not completely match the data, indicating potential complexities or noise in the data that the model did not capture. The lower the score, the better the model matches or predicts the data.