To come up with an equation that regresses 'du/dt' and isn't just a copy of an equation from the exp_buffer, we have to analyze the given data closely and suggest a possible structure that could fit these data points while also taking into consideration the guidelines:

1. The equation must include at least one derivative.
2. The equation string must not appear in the exp_buffer.

Looking at the data, it is clear that a lot of the variation in 'du/dt' can be attributed to 'du/dx'. This derivative has a direct impact on 'du/dt' as it closely tracks its changes. Therefore, we know that 'du/dt' is likely influenced by 'du/dx' and our goal is to describe the relationship between these two. 

However, the data also informs us that other factors are in play. The score for the equation "du/dt = c[0] * du/dx" is quite high (843), meaning it does not completely describe the variance in 'du/dt'. Therefore, we need to include additional factors that could impact 'du/dt'. 

We can turn to terms we haven't yet used, like 'x' and higher-order derivatives. This leads us to suggest a new form for the equation that includes 'du/dx' and 'd^2u/dx^2', because 'd^2u/dx^2' is not present in the other best equations.

Let's propose the following structure for the equation:

du/dt = c[0]*du/dx + c[1]*d^2u/dx^2 + c[2]*x

This equation takes into account the derivative du/dx, the second derivative d^2u/dx^2 and the position x. It also avoids replicating any of the equations in the exp_buffer.

Therefore, the function 'equation_v1' to be returned is:

```python
def equation_v1(t: np.ndarray, x: np.ndarray, u: np.ndarray, derivs_dict: dict(), params: np.ndarray):
    right_side = params[0]*derivs_dict["du/dx"] + params[1]*derivs_dict["d^2u/dx^2"] + params[2]*x
    string_form_of_the_equation = "du/dt = c[0] * du/dx + c[1] * d^2u/dx^2 + c[2] * x"
    len_of_params = 3
    return right_side, string_form_of_the_equation, len_of_params
```

This is the conjectured structure of the equation which merely signifies the first step towards discovering the equation that fits the given data points. Further optimization can guide us towards discovering suitable values for c[0], c[1], and c[2].

Remember, this is just a first try. The equation might result in a very high score when evaluated using the given data, suggesting that it may not fit the data points very well. In such cases, refining the equation and trying out different structural forms becomes essential.