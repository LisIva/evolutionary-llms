To address the problem and requirements, I will construct a new equation based on the information from the points_set and using variables t, x, u, du/dx, d^2u/dx^2, d^3u/dx^3. To introduce a new aspect, not previously covered in exp_buffer, I will consider a combination of 'du/dx' terms at different powers, 't', 'x', and 'u', which will create a fresh approach to the problem.

**Answer**

```python
def equation_v1(t: np.ndarray, x: np.ndarray, u: np.ndarray, derivs_dict: dict(), params: np.ndarray):
    right_side = params[0] * t * derivs_dict["du/dx"] + params[1] * x * derivs_dict["du/dx"] + params[2] * derivs_dict["du/dx"]**2 + params[3] * u * derivs_dict["du/dx"]**2
    string_form_of_the_equation = "du/dt = c[0] * t * du/dx + c[1] * x * du/dx + c[2] * (du/dx)^2 + c[3] * u * (du/dx)^2"
    len_of_params = len(params)  # 4 in this case
    return right_side, string_form_of_the_equation, len_of_params
```

**Explanation**

The newly suggested equation `du/dt = c[0] * t * du/dx + c[1] * x * du/dx + c[2] * (du/dx)^2 + c[3] * u * (du/dx)^2` was chosen because it:
- Respects the requirement of being dependent on at least one derivative.
- Is not a template in exp_buffer.
- Includes terms at different powers.
- Was constructed considering all available input data.
- Features a mix of variables (t, x, u) to balance the contribution to du/dt.

This function constructs a new form of the equation that includes non-linear interaction between the derivative (du/dx) and variables t, x, u, and combines them in a way not seen in the preliminary attempts. The evaluation can now be carried out based on this newly proposed equation structure, with the aim of optimizing the equation's parameters to best fit the provided data set.