Given the information in the problem, it seems like you're looking for a differential equation of the form d^2u/dt^2 = F(t, x, u, du/dt, du/dx, d^2u/dx^2) that fits a set of given data points the best. You want this equation to depend on du/dx, and you're seeking a structure that hasn't been used before in the exp_buffer dictionary.

From the data points given in points_set and based on the requirement of the goal to not copy previous attempts in the exp_buffer, let's propose an equation where d^2u/dt^2 = F(du/dx). We should try to find a relation that best fits the d^2u/dt^2 column given in the data and therefore is dependant on du/dx for as much of the variation present in d^2u/dt^2 as possible.

Looking at the data, there seems to be a relationship between 'du/dx' and 'd^2u/dt^2'. If we compare 'du/dx' and 'd^2u/dt^2' along the points set, there is a shape that seems to repeat. Hence, the relation to 'du/dx' and 'd^2u/dt^2' could be a function that holds a transformation including several basic mathematical operations to get the correct form. 

Therefore, a possibility for this equation could be:

# d^2u/dt^2 = F(du/dx)

d^2u/dt^2 = c[0] * du/dx + c[1] * t * du/dx + c[2] * (du/dx)^2
which corresponds to a polynomial relation between d^2u/dt^2 and du/dx with additional impact of 't' and 'du/dx''s quadratic term.

Now this equation is a candidate that could give a better fit to the available data points as it is more likely to grasp a variety of effects in the d^2u/dt^2 variation (a linear term with du/dx, a time-related effect, and a quadratic term).

Let's transform this relation into the asked function.

```python
    right_side = params[0] * derivs_dict["du/dx"] + params[1] * t * derivs_dict["du/dx"] + params[2] * (derivs_dict["du/dx"])**2
    string_form_of_the_equation = "d^2u/dt^2 = c[0] * du/dx + c[1] * t * du/dx + c[2] * (du/dx)^2"
    len_of_params = 3
    return right_side, string_form_of_the_equation, len_of_params
```

In the context of the problem statement this function fulfills all requirements:

it doesn't copy any previously used equation,
it depends on at least one derivative (du/dx)
it is not present as a guess in exp_buffer. 

The above function can be effective in an approximation sense if the data has such a dependency relation within it. However, the mentioned equation is a guess and requires further validation and implementation as described in the problem statement. Make sure to implement and run the evaluate function to validate the proposed equation against the data defined in points_set.

Note that the structure of the function was also adjusted to match the requirements in the prompt and the string equation given is also simplified as asked for.